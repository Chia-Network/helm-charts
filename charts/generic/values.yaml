# Default values for generic.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

deployment:
  containerPort: 80
  # Environment variables to add directly to the deployment configuration (as opposed to via the secret or configmap)
  environment: {}
  #  MY_KEY: "My Value"
  livenessProbe: {}
#    httpGet:
#      path: /
#      port: http
  readinessProbe: {}
#    httpGet:
#      path: /
#      port: http

service:
  enabled: false
  type: ClusterIP
  additionalLabels: {}
    # application: my-application
    # prometheus: application-metrics
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tlsEnabled: true

# Creates a MySQL DB cluster and database with the following settings (utilizes MySQL-Operator)
mysql:
  enabled: false
  dbName: "my-db"
  instances: 3
  routerInstances: 1
  rootUser:
    secret-name: db-root-creds
    user: "root"
    password: "password"
  standardUser:
    secret-name: db-user-creds
    user: "db-user"
    password: "password"

# Creates a secret with the following values, and mounts as env into the main deployment container
secretEnvironment: {}
#  MY_KEY: "My Value"

# Creates a secret with the following values, and mounts as a file into the main deployment container
secretFile:
  mountPath: "/etc/secrets"
  values: {}
  stringValues: {}
  # filename: "file content"

# Creates a configmap with the following values, and mounts as env into the main deployment container
configmapEnvironment: {}
#  MY_KEY_2: "My Value"

# Creates a configmap with the following values, and mounts as a file into the main deployment container
configmapFile:
  mountPath: "/etc/configmap"
  values: {}
  # filename: "file content"

volumes: []
#  - name: example-volume
#    mountPath: /my-example-volume
#    readOnly: false
#    size: 1Gi
#    storageClassName: longhorn

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
